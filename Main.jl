using Pkg; 
Pkg.activate("."); 
Pkg.instantiate()
using AttractorNetwork
mod = TwoPopulations.MeanField()   #you can choose between TwoPopulations.MeanField() and TwoPopulations.MFnoSelfInteraction()
#OnePopulation.PP_m1R(rm = 1, A = 1, h0 = 0.25, γ = 0.01 , b = 1000, bound_r = 0.03, resolution = 200, c_hat = 0, load = 0.0)
#OnePopulation.compute_critical_capacity(rm = 1, A = 1, h0 = 0.25, γ = 0.002 , b = 100, bound_r = 0.03, resolution = 100, size = 100, max_load = 5)
#TwoPopulations.generate_bifurcation_diagram( h0 = 0.57, rm =  1, A = 1, b = 12.8, γ = 0.002, resolution = 150, resolution_factor = 1,  size = 100, load = 0. , bound_r = 0.03, model = mod, corr_noise = false)
#TwoPopulations.generate_critical_corr_vs_b_h0(rm = 1, A = 1, γ = 0.002, resolution = 100, resolution_factor = 1.1,  size = 50, load = 0 , bound_r = 0.03, model = mod)
#TwoPopulations.run_dynamics(final_time = 0.1, γ = 0.002, resolution = 200, h = 0.1, h0 = 0.57, b = 12., A = 4.35, rm = 0.83, C_hat = 0. , load = 0 , bound_low = -0.1, bound_up = 1.1, bound_r = 0.03, model = mod)
#TwoPopulations.generate_I_C_curve(; rm = 1, A = 1, h0 = 0.25, γ = 0.002 , b = 100, tau_m = 1, size_C = 10, size_I = 10, load=0)
#ThreePopulations.generate_bifurcation_diagram( h0 = 0.5, rm = 1, A = 1, b = 100, γ = 0.002, resolution = 100, resolution_factor = 1.1,   size = 50, load = 0 , bound_r = 0.05)
#FourPopulations.generate_bifurcation_diagram( h0 = 0.5, rm = 1, A = 1, b = 100, γ = 0.002, resolution = 100, resolution_factor = 1.1,   size = 50, load = 0 , bound_r = 0.05)
#AdaptTwoPop.run_dynamics(final_time = 100. , min_J0 = 0., max_J0 = 0., γ = 0.002, resolution = 500, resolution_factor = 1, h = 0.1, h0 = 0.25, b = 100, A = 100., rm = 1., C_hat = 0. , bound_low = -0.2, bound_up = 1.2, load = 0.)
#AdaptTwoPop.generate_bifurcation_diagram( h0 = 0., rm = 1, A = 1, b = 30, γ = 0.002, resolution = 300, resolution_factor = 1,  size = 50, load = 0 , bound_r = 0.03, J0 = 0.7)
#AdaptTwoPop.compute_critical_C_vs_gamma()
#AdaptTwoPop.compute_critical_C_vs_b()
#AdaptTwoPop.compute_critical_C_vs_h0()
#AdaptTwoPop.compute_critical_C_vs_J0()
#AdaptFourPop.run_dynamics(final_time = 500, min_J0 = 0.7, max_J0 = 1.2, γ = 0.002, resolution = 200, h = 0.1, h0 = 0, b = 300, C_hat = 0.04, bound_low = -0.1, bound_up = 1.1)
#FullSim.evolve(N = 10000, P = 2, n = 2, γ = 0.002 , C_hat = 0.15, b = 100., dilution = 1., t_max = 15, A = 1., I1 = 0.3)
#FullSim.experiment_proposal_evolve1(N = 20000, P = 5, n = 5, γ = 0.002 , C_hat = 0.1, b = 100., dilution = 1., t_max = 15, A = 1.)
#FullSim_DitributedGains.evolve(C_hat = 0.15,  t_max = 15,  h0 = 0.25, μ_min = 0.1, σ_min = 0.1, μ_max = 1., σ_max = 0.1, N = 10000, P = 5000)
#AdaptFullSim.evolve(N = 10000, P = 16, n = 12, γ = 0.002, dt = 0.1, t_max = 500, C_hat = 0.2, b = 100.)
#AdaptFullSimDistrGains.evolve(N = 10000, P = 16, n = 4, γ = 0.002, dt = 0.1, t_max = 500, C_hat = 0.2, b = 100.)
#AttractorNetwork.Reproduce_experiment(N= 100000, n_repetitions = 40)